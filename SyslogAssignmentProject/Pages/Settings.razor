@page "/settings"
@using static Globals;
@using Classes;

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
<h3>Settings</h3>

<h4>Usability settings</h4>
<MudPaper Elevation="2">
    <MudColorPicker Label="Debug colour picker" @bind-Text="DEFAULT_DEBUG_COLOUR" Style="@($"color: {DEFAULT_DEBUG_COLOUR};")" Placeholder="Select Color" ValueChanged="UpdateDebugColor" />
    <MudColorPicker Label="Warning colour picker" @bind-Text="DEFAULT_WARNING_COLOUR" Style="@($"color: {DEFAULT_WARNING_COLOUR};")" Placeholder="Select Color" ValueChanged="UpdateWarningColor" />
    <MudColorPicker Label="Info colour picker" @bind-Text="DEFAULT_INFO_COLOUR" Style="@($"color: {DEFAULT_INFO_COLOUR};")" Placeholder="Select Color" ValueChanged="UpdateInfoColor" />
    <MudColorPicker Label="Error colour picker" @bind-Text="DEFAULT_ERROR_COLOUR" Style="@($"color: {DEFAULT_ERROR_COLOUR};")" Placeholder="Select Color" ValueChanged="UpdateErrorColor" />
</MudPaper>
 
<h4>Networking settings</h4>
 
<label for="ipadresses">Choose the IP address you want to listen to:</label>
<select @onchange="UpdateIp">
  <option value="currentIp">@S_ReceivingIpAddress</option>
  @foreach (string _ipAddress in _allIps.AllIpAddresses)
  {
    <option value="@_ipAddress">@_ipAddress</option>
  }
</select>
 
 
<label for="portNumber">Enter a port number: </label>
<input @onchange="UpdatePort" type="text" id="portNumber" value="@S_ReceivingPortNumber" name="portNumber">
<div hidden="@_errorMessage"><font color="#FF0000">Please set port number to valid value.</font></div>
<div hidden="@_successMessage"><font color="#00A300">Port number changed successfully.</font></div>
<div hidden="@(!_errorMessage || !_successMessage)"> </div>
 
<label for="listeningProtocol">Choose the transport protocol that you wish to listen to:</label>
<select @onchange="UpdateListeners" name="listeningProtocol">
  @foreach(string _option in _options)
  {
    <option value="@_option">@_option</option>
  }
</select>
 
 

</MudContainer>
@code {
  private string _selectedValue { get; set; }
  private string _ipAddress { get; set; }
  private bool _errorMessage = true;
  private bool _successMessage = true;
  private string[] _options = { "Both", "UDP", "TCP" };
  List<string> _ipAddresses = new List<string>();
  private string selectedIp { get; set; }
  MachineIps _allIps = new MachineIps();

  protected override void OnInitialized()
  {
    S_LiveFeedMessages.IpAndPortUpdate += HandleSettingsValueChanges;
    int _index = Array.IndexOf(_options, S_ListeningOptions);
    string _tempPosition = _options[0];
    _options[0] = _options[_index];
    _options[_index] = _tempPosition;
  }
  private void HandleSettingsValueChanges()
  {
    InvokeAsync( () =>
    {
      StateHasChanged();
    });
  }
  private void UpdateIp(ChangeEventArgs e)
  {
    S_ReceivingIpAddress = e.Value.ToString();
    S_LiveFeedMessages.UpdateIpAndPort();
  }
  private void UpdateListeners(ChangeEventArgs e)
  {
    S_ListeningOptions = e.Value.ToString();
  }

  private void UpdatePort(ChangeEventArgs e)
  {
    if (int.TryParse(e.Value.ToString(), out int result))
    {
      if (result > 0 && result < 65536)
      {
        _errorMessage = true;
        _successMessage = false;
        S_ReceivingPortNumber = result;
      }
      else
      {
        _errorMessage = false;
        _successMessage = true;
        S_ReceivingPortNumber = 514;
      }
    }
    else
    {
      _errorMessage = false;
      _successMessage = true;
      S_ReceivingPortNumber = 514;
    }
    S_LiveFeedMessages.UpdateIpAndPort();
  }

  private void UpdateDebugColor()
  {
    S_ChangingDebugColour = "color:" + DEFAULT_DEBUG_COLOUR;
  }

  private void UpdateInfoColor()
  {
        S_ChangingInfoColour = "color:" + DEFAULT_INFO_COLOUR;
  }

  private void UpdateWarningColor()
  {
        S_ChangingWarningColour = "color:" + DEFAULT_WARNING_COLOUR;
  }

  private void UpdateErrorColor()
  {
        S_ChangingErrorColour = "color:" + DEFAULT_ERROR_COLOUR;
  }
}