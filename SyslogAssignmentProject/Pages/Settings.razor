@page "/settings"
@inject ISnackbar _snackbar;
@inject GlobalInjection _injectedGlobals;
@inject Radio _injectedRadio;
@inject RadioInjection _injectedRadioRadio;

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
  <MudText Class="pa-3" Typo="Typo.h4">Settings</MudText>

  <MudText Class="pa-3" Typo="Typo.h6">Colour Settings</MudText>

  <MudPaper Elevation="2">
    <MudColorPicker Class="px-2" Style="@($"color: {_injectedGlobals.CurrentDebugColour}")" Label="Debug colour picker" @bind-Text="_injectedGlobals.CurrentDebugColour" Placeholder="Select Color" />
    <MudColorPicker Class="px-2" Style="@($"color: {_injectedGlobals.CurrentWarningColour}")" Label="Warning colour picker" @bind-Text="_injectedGlobals.CurrentWarningColour" Placeholder="Select Color" />
    <MudColorPicker Class="px-2" Style="@($"color: {_injectedGlobals.CurrentInfoColour}")" Label="Info colour picker" @bind-Text="_injectedGlobals.CurrentInfoColour" Placeholder="Select Color" />
    <MudColorPicker Class="px-2" Style="@($"color: {_injectedGlobals.CurrentErrorColour}")" Label="Error colour picker" @bind-Text="_injectedGlobals.CurrentErrorColour" Placeholder="Select Color" />
  </MudPaper>

  <MudText Class="pa-3" Typo="Typo.h6">Network Settings</MudText>

  <MudPaper Elevation="2" Class="px-2">
    <MudSelect T="string" Label="Select listening IP" AnchorOrigin="Origin.BottomCenter" ValueChanged="value => IpAddressChangedHandler(value)" Value=_injectedGlobals.ReceivingIpAddress>
      @foreach (string _ipAddress in _allIps.AllIpAddresses)
      {
        <MudSelectItem Value="@_ipAddress" />
      }
    </MudSelect>

    <MudSelect T="string" Label="Select transport protocol to listen for" ValueChanged="value => TransportProtocolChangedHandler(value)" Value="_injectedGlobals.ListeningOptions" AnchorOrigin="Origin.BottomCenter">
      <MudSelectItem Value="@("UDP")" />
      <MudSelectItem Value="@("TCP")" />
      <MudSelectItem Value="@("Both")" />
    </MudSelect>

    <MudTextField Label="Enter port number" TextChanged="value => PortNumberChangedHandler(value)" Value="_injectedGlobals.ReceivingPortNumber" Variant="Variant.Outlined" />
  </MudPaper>
  
  <MudPaper Elevation="2">
    @foreach(Radio _radio in _listOfHiddenRadios)
    {
      if (_radio.Hidden == true)
      {
        <MudSwitch CheckedChanged="@((bool _hiddenRadio) => HandleChangedVisibility(_hiddenRadio))" ThumbIcon="@(_injectedRadioRadio.Radio.Hidden==false ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"></MudSwitch>
      }
    }
    

  </MudPaper>
</MudContainer>

@code {
  private MachineIps _allIps = new MachineIps();
  private List<Radio> _listOfHiddenRadios = new List<Radio>();

  /// <summary>
  /// Displays appropriate snackbar if changed port is acceptable.
  /// </summary>
  protected override void OnInitialized()
  {
    _injectedGlobals.BadChangePortNumber += HandleBadPort;
    _injectedGlobals.GoodChangePortNumber += HandleGoodPort;
  }
  /// <summary>
  /// Informs user that the entered port cannot be used and is defaulted to 514.
  /// </summary>
  private void HandleBadPort()
  {
    _snackbar.Add("Invalid port number, defaulting to 514");
  }
  /// <summary>
  /// Informs user that the entered port is usable and is now use.
  /// </summary>
  private void HandleGoodPort()
  {
    _snackbar.Add($"Listening to connections on port {_injectedGlobals.ReceivingPortNumber}");
  }
  /// <summary>
  /// Informs user that the currently selected transport protocol is now in use.
  /// </summary>
  /// <param name="option">TCP, UDP or both transport protocols.</param>
  private void TransportProtocolChangedHandler(string option)
  {
    _injectedGlobals.ListeningOptions = option;
    _snackbar.Add($"Listening to {option} connections");
  }
  /// <summary>
  /// Parses port number to singleton to be tested by the listener to see if it is valid.
  /// </summary>
  /// <param name="number">New port number.</param>
  private void PortNumberChangedHandler(string number)
  {
    if (int.TryParse(number, out int num))
    {
      _injectedGlobals.ReceivingPortNumber = num;
    }
    else
    {
      _injectedGlobals.ReceivingPortNumber = -1;
    }
  }
  /// <summary>
  /// Parses newly selected IP address to listen for connections on.
  /// </summary>
  /// <param name="address">New IP address.</param>
  private void IpAddressChangedHandler(string address)
  {
    _injectedGlobals.ReceivingIpAddress = address;
    _snackbar.Add($"Listening with {address}");
  }
  
  /// <summary>
  /// Makes selected radio hidden.
  /// </summary>
  /// <param name="_radioVisibility">Radio's visibility that needs to change.</param>
  private void HandleChangedVisibility(bool _radioVisibility)
  {
    _injectedRadioRadio.Radio.Hidden = _radioVisibility;
    _injectedRadioRadio.UpdateRadioHiddenValue();
    Console.WriteLine($"The Radio is Visible: {_radioVisibility}");
  }
}