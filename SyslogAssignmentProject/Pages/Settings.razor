@page "/settings"
@using static Globals;
@using Classes;
<h3>Settings</h3>
<br>
<h4>Usability settings</h4>
<br>
<label for="favcolor">Select Debug color:</label>
<input type="color" id="debugColor" name="debugColor" @onchange="UpdateDebugColor" value=@S_CurrentDebugColour>
<br>
<br>
<label for="favcolor">Select Info color:</label>
<input type="color" id="infoColor" name="infoColor" @onchange="UpdateInfoColor" value=@S_CurrentInfoColour>
<br>
<br>
<label for="favcolor">Select Warning color:</label>
<input type="color" id="warningColor" name="warningColor" @onchange="UpdateWarningColor" value=@S_CurrentWarningColour>
<br>
<br>
<label for="favcolor">Select Error color:</label>
<input type="color" id="errorColor" name="errorColor" @onchange="UpdateErrorColor" value=@S_CurrentErrorColour>
<br>
<br>
<h4>Networking settings</h4>
<br>
<label for="ipadresses">Choose the IP address you want to listen to:</label>
<select @onchange="UpdateIp">
  <option value="currentIp">@S_ReceivingIpAddress</option>
  @foreach (string _ipAddress in _allIps.AllIpAddresses)
  {
    <option value="@_ipAddress">@_ipAddress</option>
  }
</select>
<br>
<br>
<label for="portNumber">Enter a port number: </label>
<input @onchange="UpdatePort" type="text" id="portNumber" value="@S_ReceivingPortNumber" name="portNumber">
<div hidden="@_errorMessage"><font color="#FF0000">Please set port number to valid value.</font></div>
<div hidden="@_successMessage"><font color="#00A300">Port number changed successfully.</font></div>
<div hidden="@(!_errorMessage || !_successMessage)"><br></div>
<br>
<label for="listeningProtocol">Choose the transport protocol that you wish to listen to:</label>
<select @onchange="UpdateListeners" name="listeningProtocol">
  @foreach(string _option in _options)
  {
    <option value="@_option">@_option</option>
  }
</select>
<br>
<br>
@code {
  private string _selectedValue { get; set; }
  private string _ipAddress { get; set; }
  private bool _errorMessage = true;
  private bool _successMessage = true;
  private string[] _options = { "Both", "UDP", "TCP" };
  List<string> _ipAddresses = new List<string>();
  private string selectedIp { get; set; }
  MachineIps _allIps = new MachineIps();

  protected override void OnInitialized()
  {
    S_LiveFeedMessages.IpAndPortUpdate += HandleSettingsValueChanges;
    int _index = Array.IndexOf(_options, S_ListeningOptions);
    string _tempPosition = _options[0];
    _options[0] = _options[_index];
    _options[_index] = _tempPosition;
  }
  private void HandleSettingsValueChanges()
  {
    InvokeAsync( () =>
    {
      StateHasChanged();
    });
  }
  private void UpdateIp(ChangeEventArgs e)
  {
    S_ReceivingIpAddress = e.Value.ToString();
    S_LiveFeedMessages.UpdateIpAndPort();
  }
  private void UpdateListeners(ChangeEventArgs e)
  {
    S_ListeningOptions = e.Value.ToString();
  }

  private void UpdatePort(ChangeEventArgs e)
  {
    if (int.TryParse(e.Value.ToString(), out int result))
    {
      if (result > 0 && result < 65536)
      {
        _errorMessage = true;
        _successMessage = false;
        S_ReceivingPortNumber = result;
      }
      else
      {
        _errorMessage = false;
        _successMessage = true;
        S_ReceivingPortNumber = 514;
      }
    }
    else
    {
      _errorMessage = false;
      _successMessage = true;
      S_ReceivingPortNumber = 514;
    }
    S_LiveFeedMessages.UpdateIpAndPort();
  }

  private void UpdateDebugColor(ChangeEventArgs e)
  {
    S_CurrentDebugColour = e.Value.ToString();
  }

  private void UpdateInfoColor(ChangeEventArgs e)
  {
    S_CurrentInfoColour = e.Value.ToString();
  }

  private void UpdateWarningColor(ChangeEventArgs e)
  {
    S_CurrentWarningColour = e.Value.ToString();
  }

  private void UpdateErrorColor(ChangeEventArgs e)
  {
    S_CurrentErrorColour = e.Value.ToString();
  }
}