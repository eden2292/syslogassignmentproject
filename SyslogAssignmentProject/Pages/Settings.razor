@page "/settings"
@using static Globals;
@using Classes;
<h3>Settings</h3>
<br>
<h4>Usability settings</h4>
<br>
<label for="favcolor">Select Debug color:</label>
<input type="color" id="debugColor" name="debugColor" @onchange="UpdateDebugColor" value=@S_CurrentDebugColour>
<br>
<br>
<label for="favcolor">Select Info color:</label>
<input type="color" id="infoColor" name="infoColor" @onchange="UpdateInfoColor" value=@S_CurrentInfoColour>
<br>
<br>
<label for="favcolor">Select Warning color:</label>
<input type="color" id="warningColor" name="warningColor" @onchange="UpdateWarningColor" value=@S_CurrentWarningColour>
<br>
<br>
<label for="favcolor">Select Error color:</label>
<input type="color" id="errorColor" name="errorColor" @onchange="UpdateErrorColor" value=@S_CurrentErrorColour>
<br>
<br>
<h4>Networking settings</h4>
<br>
<label for="ipadresses">Choose the IP adress you want to listen to:</label>
<select @onchange="UpdateIp">
  <option value="currentIp">@S_ReceivingIpAddress</option>
  @foreach (var _ipAddress in _allIps.AllIpAddresses)
  {
    <option value="@_ipAddress">@_ipAddress</option>
  }
</select>
<br>
<br>
<label for="portNumber">Enter a port number: </label>
<input @onchange="UpdatePort" type="text" id="portNumber" value="@S_ReceivingPortNumber" name="portNumber">
<br>
<br>
<label for="listeningProtocol">Choose the IP adress you want to listen to:</label>
<select id="listeningProtocol" name="listeningProtocol">
  <option value="UDP">UDP</option>
  <option value="TCP">TCP</option>
  <option value="UDP and TCP">Both</option>
</select>
<br>
<br>
@code {
  private string selectedValue { get; set; }
  private string IpAddress { get; set; }
  List<string> _ipAddresses = new List<string>();
  private string selectedIp { get; set; }
  MachineIps _allIps = new MachineIps();

  private void UpdateIp(ChangeEventArgs e)
  {
    Console.WriteLine(e.Value.ToString());
    S_ReceivingIpAddress = e.Value.ToString();
  }

  private void UpdatePort(ChangeEventArgs e)
  {
    S_ReceivingPortNumber = Convert.ToInt32(e.Value);
  }

  private void UpdateDebugColor(ChangeEventArgs e)
  {
    S_CurrentDebugColour = e.Value.ToString();
  }

  private void UpdateInfoColor(ChangeEventArgs e)
  {
    S_CurrentInfoColour = e.Value.ToString();
  }

  private void UpdateWarningColor(ChangeEventArgs e)
  {
    S_CurrentWarningColour = e.Value.ToString();
  }

  private void UpdateErrorColor(ChangeEventArgs e)
  {
    S_CurrentErrorColour = e.Value.ToString();
  }
}