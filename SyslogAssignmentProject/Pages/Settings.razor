@page "/settings"
@inject ISnackbar Snackbar;
@inject GlobalInjection InjectedGlobals;

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
<MudText Class="pa-3" Typo="Typo.h4">Settings</MudText>

<MudText Class="pa-3" Typo="Typo.h6">Colour Settings</MudText>

<MudPaper Elevation="2">
    <MudColorPicker Class="px-2" Style="@($"color: {InjectedGlobals.DEFAULT_DEBUG_COLOUR}")" Label="Debug colour picker" @bind-Text="InjectedGlobals.DEFAULT_DEBUG_COLOUR" Placeholder="Select Color"  />
    <MudColorPicker Class="px-2" Style="@($"color: {InjectedGlobals.DEFAULT_WARNING_COLOUR}")" Label="Warning colour picker" @bind-Text="InjectedGlobals.DEFAULT_WARNING_COLOUR" Placeholder="Select Color" />
    <MudColorPicker Class="px-2" Style="@($"color: {InjectedGlobals.DEFAULT_INFO_COLOUR}")" Label="Info colour picker" @bind-Text="InjectedGlobals.DEFAULT_INFO_COLOUR" Placeholder="Select Color" />
    <MudColorPicker Class="px-2" Style="@($"color: {InjectedGlobals.DEFAULT_ERROR_COLOUR}")" Label="Error colour picker" @bind-Text="InjectedGlobals.DEFAULT_ERROR_COLOUR" Placeholder="Select Color" />
</MudPaper>
 
<MudText Class="pa-3" Typo="Typo.h6">Network Settings</MudText>

<MudPaper Elevation="2" Class="px-2">
        <MudSelect T="string" Label="Select listening IP" AnchorOrigin="Origin.BottomCenter" ValueChanged="value => ipAddressChangedHandler(value)" Value=InjectedGlobals.S_ReceivingIpAddress>
            @foreach (string _ipAddress in _allIps.AllIpAddresses)
            {
                <MudSelectItem Value="@_ipAddress" />
            }
        </MudSelect>

    <MudSelect T="string" Label="Select transport protocol to listen for" ValueChanged="value => transportProtocolChangedHandler(value)" Value="InjectedGlobals.S_ListeningOptions" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem Value="@("UDP")" />
        <MudSelectItem Value="@("TCP")" />
        <MudSelectItem Value="@("Both")" />
    </MudSelect>
    
    <MudTextField Label="Enter port number" TextChanged="value => portNumberChangedHandler(value)" Value="InjectedGlobals.S_ReceivingPortNumber" Variant="Variant.Outlined" />
</MudPaper>
</MudContainer>

@code {
  protected override void OnInitialized()
  {
    InjectedGlobals.ChangePortNumber += HandleChangedPort;
  }
  private void HandleChangedPort()
  {

  }
  void transportProtocolChangedHandler(string option)
  {
    InjectedGlobals.S_ListeningOptions = option;
    Snackbar.Add($"Listening to {option} connections");
  }

    void portNumberChangedHandler(string number)
    {
        if (int.TryParse(number, out int num))
        {
            InjectedGlobals.S_ReceivingPortNumber = num;
            Snackbar.Add($"Listening to connections on port {number}");
        }
        else
        {
            Snackbar.Add("Invalid Port number, defaulting to 514");
            InjectedGlobals.S_ReceivingPortNumber = 514;
        }

    }

    void ipAddressChangedHandler(string address)
    {
        InjectedGlobals.S_ReceivingIpAddress = address;
        Snackbar.Add($"Listening with {address}");
    }
    MachineIps _allIps = new MachineIps();
}