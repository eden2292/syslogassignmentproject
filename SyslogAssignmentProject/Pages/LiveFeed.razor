@using SyslogAssignmentProject.Pages.DisplayPages;
@inject GlobalInjection _injectedGlobals;
@inject RadioListServicer _injectedRadio;
@inject ListServicer _injectedList;
@page "/"
@inject IDialogService DialogService

<PageTitle>Syslog Live Feed</PageTitle>
<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">

    <h1>Live Feed</h1>
    <p>Received syslog messages are displayed below.</p>

    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Style="background-color: #311b82; color: white" @onclick="OpenDialogClear">Clear Live Feed</MudButton>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Archive" Style="background-color: #311b82; color: white" @onclick="OpenDialogExport">Export Messages</MudButton>

    <MudPaper Elevation="5" Class="pa-2 mr-5 my-5" MaxWidth="20em" MaxHeight="10em">
        <MudStack Row=true>
            <MudSelect T="string" Label="IPs" @bind-Value="_selectedIp" FullWidth=false Dense=true>
                <MudSelectItem Value="@(string.Empty)">All</MudSelectItem>
                @foreach (string _ipAddress in _injectedRadio.UniqueIpAddresses())
                {
                    <MudSelectItem Value="@_ipAddress" />
                }
            </MudSelect>
            <MudSelect T="string" Placeholder="Severity" @bind-Value="_selectedSeverity" FullWidth=false Dense=true>
                <MudSelectItem Value="@(string.Empty)">All</MudSelectItem>
                <MudSelectItem Value="@("Debug")">Debug</MudSelectItem>
                <MudSelectItem Value="@("Info")">Info</MudSelectItem>
                <MudSelectItem Value="@("Warning")">Warning</MudSelectItem>
                <MudSelectItem Value="@("Error")">Error</MudSelectItem>
            </MudSelect>
        </MudStack>
    </MudPaper>

    <MudTable Items="@_injectedList.SyslogMessageList.OrderByDescending(x => x.SentDateTime).ToList()" Hover="true" AllowUnsorted="true" Dense="true" Height="50em" FixedHeader="true" Filter="new Func<SyslogMessage,bool>(FilterLiveFeed)">
        <HeaderContent>
            <MudTh>Recieving IP</MudTh>
            <MudTh>Sent Date/Time</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage, object>(x => x.ReceivedDateTime)">Received Date/Time</MudTableSortLabel></MudTh>
            <MudTh>Transmitter IP</MudTh>
            <MudTh>Transport Protocol</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage, object>(x => x.Severity)">Severity</MudTableSortLabel></MudTh>
            <MudTh>Message</MudTh>
        </HeaderContent>

        <RowTemplate>
          <MudTd Style=@($"color: {context.HexColour}")>@context.FormatIp(context.ReceivingIP, context.ReceivingPortNumber)</MudTd>
          <MudTd Style=@($"color: {context.HexColour}")>@context.SentDateTime</MudTd>
          <MudTd Style=@($"color: {context.HexColour}")>@context.ReceivedDateTime</MudTd>
          <MudTd Style=@($"color: {context.HexColour}")>@context.FormatIp(context.SenderIP, context.SenderPortNumber)</MudTd>
          <MudTd Style=@($"color: {context.HexColour}")>@context.ProtocolType</MudTd>
          <MudTd Style=@($"color: {context.HexColour}")>@context.Severity</MudTd>
          <MudTd Style=@($"color: {context.HexColour}")>@context.EndMessage</MudTd>
        </RowTemplate>
    </MudTable>

</MudContainer>

@code {
  //
  private string _selectedIp;
  private string _selectedSeverity;
  private List<SyslogMessage> _listOfMessages = new List<SyslogMessage>();
  /// <summary>
  /// Links the ListServicer action to the HandleListChanged function and sets the filters to sort by date/time.
  /// </summary>
  protected override void OnInitialized()
  {
    _injectedList.ListChanged += HandleListChanged;
  }
  /// <summary>
  /// Updates component when list updates.
  /// </summary>
  private void HandleListChanged()
  {
    InvokeAsync(() => StateHasChanged());
  }


  /// <summary>
  /// Clears live feed when button is pressed, prompts user to confirm their choice.
  /// </summary>
  /// <returns>Fire and forget</returns>
  private void OpenDialogClear()
  {
    DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
    DialogService.Show<DialogueClear>("Clear Feed", options);
  }

  private void OpenDialogExport()
  {
    DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
    DialogService.Show<DialogueExport>("Export Log", options);
  }
  private bool FilterLiveFeed(SyslogMessage toBeDisplayed) => ListServicer.FilterFunction(toBeDisplayed, _selectedIp, _selectedSeverity);
}