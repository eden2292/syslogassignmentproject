@page "/radioDisplay"
@inject RadioInjection _injectedRadio;
@inject ListServicer _injectedList;
@inject GlobalInjection _injectedGlobals;


<h1>RadioDisplay</h1>
<img src="@_injectedRadio.Radio.PathOfImage" width="292" height="140">

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
  <MudSwitch CheckedChanged="@((bool _hiddenRadio) => HandleChangedVisibility(_hiddenRadio))" ThumbIcon="@(_injectedRadio.Radio.Hidden==false ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" 
    ThumbIconColor="@(_injectedRadio.Radio.Hidden ? Color.Success : Color.Error)">Hide Radio</MudSwitch>

  <MudPaper Elevation="5">
    <MudSelect T="string" Placeholder="Severity" @bind-Value="_selectedSeverity" FullWidth=false Dense=true>
      <MudSelectItem Value="@(string.Empty)">All</MudSelectItem>
      <MudSelectItem Value="@("Debug")">Debug</MudSelectItem>
      <MudSelectItem Value="@("Info")">Info</MudSelectItem>
      <MudSelectItem Value="@("Warning")">Warning</MudSelectItem>
      <MudSelectItem Value="@("Error")">Error</MudSelectItem>
    </MudSelect>
  </MudPaper>
  <MudTable Items="@_messageList.OrderByDescending(x => x.ReceivedDateTime)" Hover="true" AllowUnsorted="true" Dense="true" Height="50em" FixedHeader="true" Filter="new Func<SyslogMessage,bool>(FilterFeed)">
    <HeaderContent>
      <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage,object>(x => x.ReceivingIP)"></MudTableSortLabel>Recieving IP</MudTh>
      <MudTh>Sent Date/Time</MudTh>
      <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage, object>(x => x.ReceivedDateTime)">Received Date/Time</MudTableSortLabel></MudTh>
      <MudTh>Transmitter IP</MudTh>
      <MudTh>Severity</MudTh>
      <MudTh>Message</MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd Style=@($"color: {context.HexColour}")>@context.FormatIp(context.ReceivingIP, context.ReceivingPortNumber)</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.SentDateTime</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.ReceivedDateTime</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.FormatIp(context.SenderIP, context.SenderPortNumber)</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.Severity</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.EndMessage</MudTd>
    </RowTemplate>
  </MudTable>

</MudContainer>

@code {
  private String _selectedSeverity;
  private List<SyslogMessage> _messageList = new List<SyslogMessage>();

  /// <summary>
  /// Filters list for the desired radio and designates HandleListChanged to update the list of displayed messages.
  /// </summary>
  protected override void OnInitialized()
  {
    _injectedRadio.IpAddress = _injectedRadio.Radio.IpAddress;
    _injectedList.ListChanged += HandleListChanged;
    _messageList = ListServicer.FilterListRetriever(_injectedRadio.IpAddress, _selectedSeverity, _injectedList.SyslogMessageList);
    StateHasChanged();
  }

  /// <summary>
  /// Updates component when list updates.
  /// </summary>
  private void HandleListChanged()
  {
    _messageList = ListServicer.FilterListRetriever(_injectedRadio.IpAddress, _selectedSeverity, _injectedList.SyslogMessageList);
    InvokeAsync(() => StateHasChanged());
  }

  /// <summary>
  /// Makes selected radio hidden.
  /// </summary>
  /// <param name="_radioVisibility">Radio's visibility that needs to change.</param>
  private void HandleChangedVisibility(bool _radioVisibility)
  {
    _injectedRadio.Radio.Hidden = _radioVisibility;
    _injectedRadio.UpdateRadioHiddenValue();
    Console.WriteLine($"The Radio is invisible: {_radioVisibility}");
  }

  /// <summary>
  /// Filters a single element in the livefeed by the stated ip address and severity.
  /// </summary>
  /// <param name="toDisplay">The syslog message that needs to be displayed/omitted.</param>
  /// <returns>Returns true if the message should be displayed according to the filters.</returns>
  private bool FilterFeed(SyslogMessage toDisplay) => 
  ListServicer.FilterFunction(toDisplay, string.Empty, _selectedSeverity);
}