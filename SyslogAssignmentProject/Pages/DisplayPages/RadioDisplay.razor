@page "/radioDisplay"
@inject RadioInjection _injectedRadio;
@inject ListServicer _injectedList;
@inject GlobalInjection _injectedGlobals;
@inject IDialogService _dialogService
@inject RadioListServicer _injectedRadioList;
@using System.Linq;
@using SyslogAssignmentProject.Pages.DialoguePages



<MudText Typo="Typo.h4">@($"{_injectedRadio.Radio.IpAddress} | {_injectedRadio.Radio.PortNumber}")</MudText>
<img src="@_injectedRadio.Radio.PathOfImage" width="292" height="140">

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
  <MudPaper>
    <MudSwitch CheckedChanged="@((bool _hiddenRadio) => HandleChangedVisibility(_hiddenRadio))" ThumbIcon="@(_injectedRadio.Radio.Hidden == false ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
               ThumbIconColor="@(_injectedRadio.Radio.Hidden ? Color.Success : Color.Error)">Hide Radio</MudSwitch>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Archive" Style="background-color: #311b82; color: white" @onclick="OpenDialogExport">Export Messages</MudButton>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Style="background-color: #311b82; color: white" @onclick="OpenDialogueDelete">Delete Radio</MudButton>
  </MudPaper>
  
  <MudPaper Elevation="2">
    <MudSelect T="string" Placeholder="Severity" @bind-Value="_selectedSeverity" FullWidth=false Dense=true>
      <MudSelectItem Value="@(string.Empty)">All</MudSelectItem>
      <MudSelectItem Value="@("Debug")">Debug</MudSelectItem>
      <MudSelectItem Value="@("Info")">Info</MudSelectItem>
      <MudSelectItem Value="@("Warning")">Warning</MudSelectItem>
      <MudSelectItem Value="@("Error")">Error</MudSelectItem>
    </MudSelect>
  </MudPaper>
  <MudTable Items="@_messageList.OrderByDescending(x => x.ReceivedDateTime)" Hover="true" AllowUnsorted="true" Dense="true" Height="50em" FixedHeader="true" Filter="new Func<SyslogMessage, bool>(FilterFeed)">
    <HeaderContent>
      <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage, object>(x => x.ReceivingIP)"></MudTableSortLabel>Receiving IP</MudTh>
      <MudTh>Sent Date/Time</MudTh>
      <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage, object>(x => x.ReceivedDateTime)">Received Date/Time</MudTableSortLabel></MudTh>
      <MudTh>Transmitter IP</MudTh>
      <MudTh>Severity</MudTh>
      <MudTh>Message</MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd Style=@($"color: {context.HexColour}")>@context.FormatIp(context.ReceivingIP, context.ReceivingPortNumber)</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.SentDateTime</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.ReceivedDateTime</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.FormatIp(context.SenderIP, context.SenderPortNumber)</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.Severity</MudTd>
      <MudTd Style=@($"color: {context.HexColour}")>@context.EndMessage</MudTd>
    </RowTemplate>
  </MudTable>
</MudContainer>

@code {
  private String _selectedSeverity;
  private List<SyslogMessage> _messageList = new List<SyslogMessage>();

  /// <summary>
  /// Filters list for the desired radio and designates HandleListChanged to update the list of displayed messages.
  /// </summary>
  protected override void OnInitialized()
  {
    _injectedRadio.IpAddress = _injectedRadio.Radio.IpAddress;
    _injectedList.ListChanged += HandleListChanged;
    _messageList = ListServicer.FilterListRetriever(_injectedRadio.IpAddress, _selectedSeverity, _injectedList.SyslogMessageList);
    StateHasChanged();
  }

  /// <summary>
  /// Updates component when list updates.
  /// </summary>
  private void HandleListChanged()
  {
    _messageList = ListServicer.FilterListRetriever(_injectedRadio.IpAddress, _selectedSeverity, _injectedList.SyslogMessageList);
    InvokeAsync(() => StateHasChanged());
  }
  /// <summary>
  /// Makes selected radio hidden.
  /// </summary>
  /// <param name="_radioVisibility">Radio's visibility that needs to change.</param>
  private void HandleChangedVisibility(bool _radioVisibility)
  {
    _injectedRadio.Radio.Hidden = _radioVisibility;
    _injectedRadio.UpdateRadioHiddenValue();
  }
  /// <summary>
  /// Filters a single element in the livefeed by the stated ip address and severity.
  /// </summary>
  /// <param name="toDisplay">The syslog message that needs to be displayed/omitted.</param>
  /// <returns>Returns true if the message should be displayed according to the filters.</returns>
  private bool FilterFeed(SyslogMessage toDisplay) => 
  ListServicer.FilterFunction(toDisplay, string.Empty, _selectedSeverity);


  [CascadingParameter]
  private MudDialogInstance _mudDialog { get; set; }

  ///<summary>
  /// Opens dialogue boxes when deletion is requested
  /// Dialogue box that is displayed depends on if the radio is still recognised as "connected"
  /// Connected status is determined by the hexcolour that is being used to display. "#8a9496" is used for radios that are still active. 
  /// </summary>
  private void OpenDialogueDelete()
  {
    if (_injectedRadio.Radio.HexColour == "#8a9496")
    {
      DialogOptions _options = new DialogOptions { CloseOnEscapeKey = true };
      _dialogService.Show<DialogueCannotDelete>("Error", _options);
    }
    else
    {
      DialogOptions _options = new DialogOptions { CloseOnEscapeKey = true };
      _dialogService.Show<DialogueDelete>("Delete Radio?", _options);
    }
  }
  
  /// <summary>
  /// Exports logs of syslog message list.
  /// </summary>
  private void OpenDialogExport()
  {
    DialogOptions _options = new DialogOptions { CloseOnEscapeKey = true };
    _dialogService.Show<DialogueExport>("Export Log", _options);
  }

  /// <summary>
  /// Cancels operation of cancelling live feed.
  /// </summary>
  private void Cancel() => _mudDialog.Cancel();
}