@page "/severityDebug"
@using static Globals

<h1>Debug Messages</h1>
<p>Debug messages sent by active radios will be displayed here</p>
<table class="table">
  <thead>
    <tr>
      <th>Received by</th>
      <th>Sent Date/Time</th>
      <th>Received Date/Time <button @onclick="SortByDateTime">@_orderDateTime</button></th>
      <th>Source of Origin <button @onclick="SortByIpOrigin">@_orderIpOrigin</button></th>
      <th>Severity</th>
      <th>Protocol</th>
      <th>Message</th>
    </tr>
  </thead>
  <tbody>
    @foreach (SyslogMessage _msgItem in S_LiveFeedMessages.SyslogMessageList)
    {
      if(_msgItem.Severity == 0)
      {
      <tr>
        <td>@((_msgItem.ReceivingIP.Length <= 15) ? ($"{_msgItem.ReceivingIP}:{_msgItem.ReceivingPort.ToString()}") : 
          ($"[{_msgItem.ReceivingIP}]:{_msgItem.ReceivingPort.ToString()}"))</td>
        <td>@((_msgItem.SentDateTime is not null) ? _msgItem.SentDateTime.ToString() : "Unknown")</td>
        <td>@_msgItem.ReceivedDateTime.ToString()</td>
        <td>@_msgItem.SenderIP</td>
        <td>@_msgItem.Severity.ToString()</td>
        <td>@_msgItem.ProtocolType</td>
        <td>@((_msgItem.EndMessage is not null) ? _msgItem.EndMessage : "Unknown")</td>
      </tr>
      }
    }
  </tbody>
</table>

@code {
    //
  private string _orderDateTime = string.Empty;
  private string _orderIpOrigin = string.Empty;
  private string _orderSeverity = string.Empty;
  /// <summary>
  /// Links the ListServicer action to the HandleListChanged function and sets the filters to sort by date/time.
  /// </summary>
  protected override void OnInitialized()
  {
    S_LiveFeedMessages.ListChanged += HandleListChanged;

    _orderDateTime = "↑";
    _orderIpOrigin = "-";
    _orderSeverity = "-";
  }
  /// <summary>
  /// Updates component when list updates.
  /// </summary>
  private void HandleListChanged()
  {
    InvokeAsync( () =>
    {
      StateHasChanged();
    }
    );
  }
  private void SortLiveFeed()
  {
    // ASC appears as DESC in live feed, vice versa, therefore reverse of what the user wants is correct.
    if (!_orderDateTime.Equals("-"))
    {
      if (_orderDateTime.Equals("↑"))
      {
        S_LiveFeedMessages.SortList(2);
      }
      else
      {
        S_LiveFeedMessages.SortList(1);
      }
    }
    else if (!_orderIpOrigin.Equals("-"))
    {
      if (_orderIpOrigin.Equals("↑"))
      {
        S_LiveFeedMessages.SortList(4);
      }
      else
      {
        S_LiveFeedMessages.SortList(3);
      }
    }
    else
    {
      if (_orderSeverity.Equals("↑"))
      {
        S_LiveFeedMessages.SortList(6);
      }
      else
      {
        S_LiveFeedMessages.SortList(5);
      }
    }
  }
  private void SortByDateTime()
  {
    if (_orderDateTime.Equals("↑"))
    {
      _orderDateTime = "↓";
    }
    else
    {
      _orderDateTime = "↑";
    }
    _orderIpOrigin = "-";
    _orderSeverity = "-";
    SortLiveFeed();
  }
  private void SortByIpOrigin()
  {
    if (_orderIpOrigin.Equals("↑"))
    {
      _orderIpOrigin = "↓";
    }
    else
    {
      _orderIpOrigin = "↑";
    }
    _orderDateTime = "-";
    _orderSeverity = "-";
    SortLiveFeed();
  }
  private void SortBySeverity()
  {
    if (_orderSeverity.Equals("↑"))
    {
      _orderSeverity = "↓";
    }
    else
    {
      _orderSeverity = "↑";
    }
    _orderIpOrigin = "-";
    _orderDateTime = "-";
    SortLiveFeed();
  }
}