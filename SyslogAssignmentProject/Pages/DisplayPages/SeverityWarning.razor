@page "/severityWarning"
@using static Globals

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">

    <MudPaper Elevation="5" Class="pa-2 mr-5 my-5" MaxWidth="20em" MaxHeight="10em">
        <MudSelect T="string" Placeholder="IPs" @bind-Value="SelectedIP" FullWidth=false Dense=true>
            <MudSelectItem Value="@("")">All</MudSelectItem>
            @* Allow filtering by IP Address within the severity page *@
            @foreach (string _ipAddress in S_RadioList.UniqueIpAddresses())
            {
                <MudSelectItem Value="@_ipAddress" />
            }
        </MudSelect>
    </MudPaper>

    <MudTable Items="@_listOfMessages" Hover="true" AllowUnsorted="true" Dense="true" Height="50em" FixedHeader="true" Filter="new Func<SyslogMessage,bool>(FilterFunc1)">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage,object>(x => x.ReceivingIP)"></MudTableSortLabel>Recieving IP</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage, object>(x => x.SentDateTime)"> Sent Date/Time</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SyslogMessage, object>(x => x.ReceivedDateTime)">Received Date/Time</MudTableSortLabel></MudTh>
            <MudTh>Transmitter IP</MudTh>
            <MudTh>Severity</MudTh>
            <MudTh>Message</MudTh>
        </HeaderContent>
        <RowTemplate>
            @if (context.Severity == 1)
            {
                <MudTd Style=@($"color: {DEFAULT_WARNING_COLOUR}")>@context.ReceivingIP</MudTd>
                <MudTd Style=@($"color: {DEFAULT_WARNING_COLOUR}")>@context.SentDateTime</MudTd>
                <MudTd Style=@($"color: {DEFAULT_WARNING_COLOUR}")>@context.ReceivedDateTime</MudTd>
                <MudTd Style=@($"color: {DEFAULT_WARNING_COLOUR}")>@($"{context.SenderIP} | {context.SenderPortNumber}")</MudTd>
                <MudTd Style=@($"color: {DEFAULT_WARNING_COLOUR}")>@context.Severity</MudTd>
                <MudTd Style=@($"color: {DEFAULT_WARNING_COLOUR}")>@context.EndMessage</MudTd>

            }
        </RowTemplate>
    </MudTable>

</MudContainer>

@code {
    //
    String SelectedIP;
    private List<SyslogMessage> _listOfMessages = new List<SyslogMessage>();

    protected override void OnInitialized()
    {
        foreach (SyslogMessage msg in S_LiveFeedMessages.SyslogMessageList)
        {
            if (msg.Severity == 1)
            {
                _listOfMessages.Add(msg);
            }
        }
    }

    private bool FilterFunc1(SyslogMessage element) => FilterFunc(element);

    private bool FilterFunc(SyslogMessage element)
    {
        if (string.IsNullOrWhiteSpace(SelectedIP))
            return true;
        if (element.SenderIP.Contains(SelectedIP, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}